# reference from https://clang.llvm.org/docs/ClangFormatStyleOptions.html

DisableFormat: false                  # 关闭格式化
BasedOnStyle: LLVM                    # 基础格式化方案
Language: Cpp                         # 语言: None, Cpp, Java, JavaScript, ObjC, Proto, TableGen, TextProto
Standard: c++17                       # 标准: Auto, Latest, c++03, c++11, c++17, c++20
UseTab: Never                         # 使用tab字符: Never, ForIndentation, ForContinuationAndIndentation, Always

TabWidth: 4                           # tab宽度
IndentWidth: 4                        # 缩进宽度
ConstructorInitializerIndentWidth: 4  # 构造函数的初始化列表的缩进宽度
ContinuationIndentWidth: 4            # 延续的行的最小缩进宽度
AccessModifierOffset: -2              # 访问说明符(public、private等)的偏移
IndentWrappedFunctionNames: true      # 函数返回类型换行时，缩进函数声明或函数定义的函数名
NamespaceIndentation: All             # 命名空间的缩进: None, Inner(缩进嵌套的命名空间中的内容), All
IndentPPDirectives: BeforeHash        # 预处理缩进, None, AfterHash, BeforeHash
IndentCaseLabels: true                # 缩进case标签

#AlignEscapedNewlines: Right           # 对齐逃脱换行
#AlignEscapedNewlinesLeft: true        # 左对齐逃脱换行(使用反斜杠换行)的反斜杠
#DerivePointerAlignment: false         # 继承最常用的指针和引用的对齐方式
AlignOperands: true                   # 水平对齐二元和三元表达式的操作数
AlignTrailingComments: true           # 对齐连续的尾随的注释
PointerAlignment: Left                # 指针和引用的对齐: Left, Right, Middle
AlignAfterOpenBracket: Align          # 开括号(开圆括号、开尖括号、开方括号)后的对齐: Align, DontAlign, AlwaysBreak(总是在开括号后换行)
AlignConsecutiveAssignments: AcrossComments               # 连续赋值时，对齐所有等号[AcrossEmptyLinesAndComments][AcrossComments]
AlignConsecutiveDeclarations: AcrossEmptyLinesAndComments # 连续声明时，对齐所有声明的变量名[AcrossEmptyLinesAndComments][AcrossComments]

BinPackArguments: false                                 # false表示函数实参要么都在同一行，要么都各自一行
BinPackParameters: false                                # false表示所有形参要么都在同一行，要么都各自一行
AllowAllParametersOfDeclarationOnNextLine: false        # 允许函数声明的所有参数在放在下一行
AllowAllArgumentsOnNextLine: false                      # 允许函数调用的所有参数在放在下一行,即使BinPackParameters为false
AllowShortBlocksOnASingleLine: true                     # 允许短的块放在同一行
AllowShortCaseLabelsOnASingleLine: true                 # 允许短的case标签放在同一行
AllowShortFunctionsOnASingleLine: Empty                 # 允许短的函数放在同一行: None, InlineOnly(定义在类中), Empty(空函数), Inline(定义在类中，空函数), All
AllowShortIfStatementsOnASingleLine: true              # 允许短的if语句保持在同一行
AllowShortLoopsOnASingleLine: true                     # 允许短的循环保持在同一行
#AlwaysBreakAfterDefinitionReturnType: None              # 总是在定义返回类型后换行(deprecated)
AlwaysBreakAfterReturnType: None                        # 总是在返回类型后换行: None, All, TopLevel(顶级函数，不包括在类中的函数), AllDefinitions(所有的定义，不包括声明), TopLevelDefinitions(所有的顶级函数的定义)
AlwaysBreakBeforeMultilineStrings: false                # 总是在多行string字面量前换行
AlwaysBreakTemplateDeclarations: true                   # 总是在template声明后换行
ConstructorInitializerAllOnOneLineOrOnePerLine: true    # 构造函数的初始化列表要么都在同一行，要么都各自一行
BreakConstructorInitializers: BeforeComma               # 构造函数的初始化列表的逗号在前
#ExperimentalAutoDetectBinPacking: true                  # 自动检测函数的调用和定义是否被格式为每行一个参数(Experimental)
Cpp11BracedListStyle: true                              # 去除C++11的列表初始化的大括号{后和}前的空格

# 在大括号前换行: Attach(始终将大括号附加到周围的上下文), Linux(除函数、命名空间和类定义，与Attach类似),
#   Mozilla(除枚举、函数、记录定义，与Attach类似), Stroustrup(除函数定义、catch、else，与Attach类似),
#   Allman(总是在大括号前换行), GNU(总是在大括号前换行，并对于控制语句的大括号增加额外的缩进), WebKit(在函数前换行), Custom
#   注：这里认为语句块也属于函数
BreakBeforeBraces: Allman
BraceWrapping:                  # 大括号换行，只有当BreakBeforeBraces设置为Custom时才有效
  AfterClass: true              # class定义后面
  AfterControlStatement: true   # 控制语句后面
  AfterEnum: true               # enum定义后面
  AfterFunction: true           # 函数定义后面
  AfterNamespace: true          # 命名空间定义后面
  AfterObjCDeclaration: true    # ObjC定义后面
  AfterStruct: true             # struct定义后面
  AfterUnion: true              # union定义后面
  AfterExternBlock: true        # extern "C" 后面
  BeforeCatch: true             # catch之前
  BeforeElse: true              # else之前
  IndentBraces: false           # 缩进大括号
  SplitEmptyFunction: true      # 空函数体换行
  SplitEmptyRecord: true        # 空类换行
  SplitEmptyNamespace: true     # 空命名空间换行
BreakBeforeBinaryOperators: None            # 在二元运算符前换行: None(在操作符后换行), NonAssignment(在非赋值的操作符前换行), All(在操作符前换行)
BreakBeforeTernaryOperators: false          # 在三元运算符前换行
BreakStringLiterals: false                  # 字符串字面值换行
ColumnLimit: 0                              # 每行字符的限制，0表示没有限制
PenaltyBreakAssignment: 100                 # 赋值对齐换行的penalty
PenaltyBreakBeforeFirstCallParameter: 100   # 在call(后对函数调用换行的penalty
PenaltyBreakComment: 100                    # 在一个注释中引入换行的penalty
PenaltyBreakFirstLessLess: 100              # 第一次在<<前换行的penalty
PenaltyBreakString: 100                     # 在一个字符串字面量中引入换行的penalty
PenaltyExcessCharacter: 100                 # 对于每个在行字符数限制之外的字符的penalty
PenaltyReturnTypeOnItsOwnLine: 100          # 将函数的返回类型放到它自己的行的penalty

SpaceAfterCStyleCast: false                 # 在C风格类型转换后添加空格
SpaceAfterTemplateKeyword: false            # 在模板 template 关键字后面添加空格
SpaceBeforeAssignmentOperators: true        # 在赋值运算符之前添加空格
SpaceBeforeParens: ControlStatements        # 开圆括号之前添加一个空格: Never, ControlStatements, Always
SpacesBeforeTrailingComments: 2             # 在尾随的评论前添加的空格数(只适用于//)
SpacesInAngles: false                       # 在尖括号的<后和>前添加空格
SpacesInContainerLiterals: false            # 在容器(ObjC和JavaScript的数组和字典等)字面量中添加空格
SpacesInCStyleCastParentheses: false        # 在C风格类型转换的括号中添加空格
SpacesInParentheses: false                  # 在圆括号的(后和)前添加空格
SpaceInEmptyParentheses: false              # 在空的圆括号中添加空格
SpacesInSquareBrackets: false               # 在方括号的[后和]前添加空格，lamda表达式和未指明大小的数组的声明不受影响
PenaltyIndentedWhitespace: 10               # 单行最多允许的连续空格?

CommentPragmas: '^ IWYU pragma:'            # 描述具有特殊意义的注释的正则表达式，它不应该被分割为多行或以其它方式改变
CompactNamespaces: false                    # 连续 namespace
KeepEmptyLinesAtTheStartOfBlocks: false     # 保留在块开始处的空行
MaxEmptyLinesToKeep: 2                      # 连续空行的最大数量
ReflowComments: true                        # 允许重新排版注释
SortIncludes: false                         # 允许排序#include
# 对#include进行排序，匹配了某正则表达式的#include拥有对应的优先级，匹配不到的则默认优先级为INT_MAX(优先级越小排序越靠前)，
# 可以定义负数优先级从而保证某些#include永远在最前面
IncludeCategories:
  - Regex: '^"(llvm|llvm-c|clang|clang-c)/'
    Priority: 2
  - Regex: '^(<|"(gtest|isl|json)/)'
    Priority: 3
  - Regex: '.*'
    Priority: 1
